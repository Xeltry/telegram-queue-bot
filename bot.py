import os
import json
from datetime import time
import pytz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode
from telegram.error import BadRequest

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
BASE_URL = os.getenv("BASE_URL")
PORT = int(os.getenv("PORT", 10000))
DATA_FILE = "queues.json"

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
MINSK_TZ = pytz.timezone("Europe/Minsk")
monday_wishes = [
    "üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü—É—Å—Ç—å —ç—Ç–∞ –Ω–µ–¥–µ–ª—è –±—É–¥–µ—Ç –ª—ë–≥–∫–æ–π –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π.",
    "üí™ –° –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–æ–º! –ù–æ–≤—ã–µ —Ü–µ–ª–∏ ‚Äî –Ω–æ–≤—ã–µ –ø–æ–±–µ–¥—ã!",
    "üöÄ –£–¥–∞—á–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –Ω–µ–¥–µ–ª–∏ –∏ –±–æ–¥—Ä–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!",
    "‚òï –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü—É—Å—Ç—å –∫–æ—Ñ–µ –±–æ–¥—Ä–∏—Ç, –∞ –∏–¥–µ–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—Ç.",
    "üìÖ –û—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏! –ü—É—Å—Ç—å –æ–Ω–∞ –ø—Ä–∏–Ω–µ—Å—ë—Ç —Ç–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏.",
    "üåø –°–ø–æ–∫–æ–π–Ω–æ–≥–æ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞, –ø—É—Å—Ç—å –≤—Å—ë –∏–¥—ë—Ç –ø–æ –ø–ª–∞–Ω—É.",
    "‚ú® –ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è ‚Äî –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –£–ª—ã–±–Ω–∏—Å—å –∏ –≤–ø–µ—Ä—ë–¥!"
]

# ===== –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ =====
def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except json.JSONDecodeError:
            pass
    return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_chat_data(chat_id):
    all_data = load_data()
    cid = str(chat_id)
    if cid not in all_data:
        all_data[cid] = {
            "milk_queue": [],
            "coffee_queue": [],
            "milk_index": 0,
            "coffee_index": 0,
            "milk_msg_id": None,
            "coffee_msg_id": None,
            "wish_index": 0
        }
        save_data(all_data)
    elif "wish_index" not in all_data[cid]:
        all_data[cid]["wish_index"] = 0
        save_data(all_data)
    return all_data[cid]

def update_chat_data(chat_id, chat_data):
    all_data = load_data()
    all_data[str(chat_id)] = chat_data
    save_data(all_data)

# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ =====
def milk_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –ö—É–ø–∏–ª(–∞) ü•õ", callback_data="milk_done")]])

def coffee_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –ü–æ—á–∏—Å—Ç–∏–ª(–∞) ‚òï", callback_data="coffee_done")]])

async def safe_edit(bot, chat_id, msg_id, new_text, keyboard):
    try:
        await bot.edit_message_text(
            new_text, chat_id=chat_id, message_id=msg_id,
            reply_markup=keyboard, parse_mode=ParseMode.HTML
        )
    except BadRequest as e:
        if "Message is not modified" in str(e):
            return
        else:
            raise

def format_queue(queue, index, title):
    if not queue:
        return f"{title}\n‚Äî –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞."
    lines = [title]
    for offset in range(len(queue)):
        i = (index + offset) % len(queue)
        marker = "‚Üí —Å–µ–π—á–∞—Å" if offset == 0 else ""
        lines.append(f"{offset+1}. {queue[i]['mention']} {marker}".rstrip())
    return "\n".join(lines)

# ===== –ü–æ–∂–µ–ª–∞–Ω–∏—è =====
async def monday_job(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    chat_data = get_chat_data(chat_id)
    idx = chat_data["wish_index"] % len(monday_wishes)
    message = monday_wishes[idx]
    chat_data["wish_index"] = (idx + 1) % len(monday_wishes)
    update_chat_data(chat_id, chat_data)
    await context.bot.send_message(chat_id=chat_id, text=message)

def schedule_weekly_wish(job_queue, chat_id):
    job_queue.run_daily(
        monday_job,
        time=time(hour=8, minute=0, tzinfo=MINSK_TZ),
        days=(0,),  # Monday
        chat_id=chat_id,
        name=f"monday_{chat_id}"
    )

# ===== –û—á–µ—Ä–µ–¥–∏ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    data = get_chat_data(chat_id)

    milk_text = format_queue(data["milk_queue"], data["milk_index"], "ü•õ –û—á–µ—Ä–µ–¥—å –Ω–∞ –º–æ–ª–æ–∫–æ")
    coffee_text = format_queue(data["coffee_queue"], data["coffee_index"], "‚òï –û—á–µ—Ä–µ–¥—å –Ω–∞ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É")

    if data["milk_msg_id"]:
        await safe_edit(context.bot, chat_id, data["milk_msg_id"], milk_text, milk_keyboard())
    else:
        msg = await update.message.reply_text(milk_text, reply_markup=milk_keyboard())
        data["milk_msg_id"] = msg.message_id

    if data["coffee_msg_id"]:
        await safe_edit(context.bot, chat_id, data["coffee_msg_id"], coffee_text, coffee_keyboard())
    else:
        msg = await update.message.reply_text(coffee_text, reply_markup=coffee_keyboard())
        data["coffee_msg_id"] = msg.message_id

    update_chat_data(chat_id, data)

    # –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ
    schedule_weekly_wish(context.job_queue, chat_id)

    await update.message.reply_text("‚òÄÔ∏è –ü–æ–∂–µ–ª–∞–Ω–∏—è –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ 08:00.")

async def add_milk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    data = get_chat_data(chat_id)
    user = update.effective_user
    if user.id not in [p["id"] for p in data["milk_queue"]]:
        mention = f"@{user.username}" if user.username else user.first_name
        data["milk_queue"].append({"id": user.id, "mention": mention})
        update_chat_data(chat_id, data)
        await update.message.reply_text("‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –º–æ–ª–æ–∫–æ.")
    else:
        await update.message.reply_text("–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –º–æ–ª–æ–∫–æ.")

async def add_coffee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    data = get_chat_data(chat_id)
    user = update.effective_user
    if user.id not in [p["id"] for p in data["coffee_queue"]]:
        mention = f"@{user.username}" if user.username else user.first_name
        data["coffee_queue"].append({"id": user.id, "mention": mention})
        update_chat_data(chat_id, data)
        await update.message.reply_text("‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É.")
    else:
        await update.message.reply_text("–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat.id
    data = get_chat_data(chat_id)

    if query.data == "milk_done":
        if not data["milk_queue"]:
            await query.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞."); return
        if query.from_user.id != data["milk_queue"][data["milk_index"]]["id"]:
            await query.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å!", show_alert=True); return

        data["milk_index"] = (data["milk_index"] + 1) % len(data["milk_queue"])
        update_chat_data(chat_id, data)
        await safe_edit(context.bot, chat_id, data["milk_msg_id"],
                        format_queue(data["milk_queue"], data["milk_index"], "ü•õ –û—á–µ—Ä–µ–¥—å –Ω–∞ –º–æ–ª–æ–∫–æ"),
                        milk_keyboard())
        next_user = data["milk_queue"][data["milk_index"]]
        await context.bot.send_message(chat_id=chat_id,
                                       text=f"‚û°Ô∏è {next_user['mention']}, —Ç–µ–ø–µ—Ä—å –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –Ω–∞ ü•õ",
                                       parse_mode=ParseMode.HTML)

    elif query.data == "coffee_done":
        if not data["coffee_queue"]:
            await query.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞."); return
        if query.from_user.id != data["coffee_queue"][data["coffee_index"]]["id"]:
            await query.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å!", show_alert=True); return

        data["coffee_index"] = (data["coffee_index"] + 1) % len(data["coffee_queue"])
        update_chat_data(chat_id, data)
        await safe_edit(context.bot,
