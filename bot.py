import os
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TOKEN = os.environ["8377153990:AAFy4pG_UH109pgfxe_TGAiXTB6waKyU7YE"]         # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç BotFather
BASE_URL = os.environ["BASE_URL"]                # –¥–æ–º–µ–Ω Render, –Ω–∞–ø—Ä–∏–º–µ—Ä https://mybot.onrender.com
PORT = int(os.environ.get("PORT", 10000))        # Render —Å–∞–º –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç PORT

DATA_FILE = "queues.json"

# === –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ ===
def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except json.JSONDecodeError:
            pass
    return {"milk_queue": [], "coffee_queue": [], "milk_index": 0, "coffee_index": 0}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def mention(user):
    return f"@{user.username}" if user.username else user.first_name

def format_queue(queue, index, title):
    if not queue:
        return f"{title}\n‚Äî –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞."
    lines = [title]
    n = len(queue)
    for offset in range(n):
        i = (index + offset) % n
        marker = "‚Üí —Å–µ–π—á–∞—Å" if offset == 0 else ""
        lines.append(f"{offset+1}. {queue[i]['mention']} {marker}".rstrip())
    return "\n".join(lines)

def milk_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("–ö—É–ø–∏–ª(–∞) ü•õ", callback_data="milk_done")]])

def coffee_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ—á–∏—Å—Ç–∏–ª(–∞) ‚òï", callback_data="coffee_done")]])

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()

    milk_text = format_queue(data["milk_queue"], data["milk_index"], "ü•õ –û—á–µ—Ä–µ–¥—å –Ω–∞ –º–æ–ª–æ–∫–æ")
    milk_msg = await update.message.reply_text(milk_text, reply_markup=milk_keyboard())

    coffee_text = format_queue(data["coffee_queue"], data["coffee_index"], "‚òï –û—á–µ—Ä–µ–¥—å –Ω–∞ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É")
    coffee_msg = await update.message.reply_text(coffee_text, reply_markup=coffee_keyboard())

    # –ó–∞–ø–æ–º–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –æ–±–Ω–æ–≤–ª—è—Ç—å –∏—Ö –∏–∑ –∫–æ–º–∞–Ω–¥)
    context.application.bot_data["chat_id"] = update.effective_chat.id
    context.application.bot_data["milk_msg_id"] = milk_msg.message_id
    context.application.bot_data["coffee_msg_id"] = coffee_msg.message_id

async def add_milk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    user = update.effective_user
    if user.id not in [p["id"] for p in data["milk_queue"]]:
        data["milk_queue"].append({
            "id": user.id,
            "mention": mention(user),
            "username": f"@{user.username}" if user.username else ""
        })
        save_data(data)
        await update.message.reply_text("‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –º–æ–ª–æ–∫–æ.")
    else:
        await update.message.reply_text("–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –º–æ–ª–æ–∫–æ.")

async def add_coffee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    user = update.effective_user
    if user.id not in [p["id"] for p in data["coffee_queue"]]:
        data["coffee_queue"].append({
            "id": user.id,
            "mention": mention(user),
            "username": f"@{user.username}" if user.username else ""
        })
        save_data(data)
        await update.message.reply_text("‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É.")
    else:
        await update.message.reply_text("–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = load_data()

    # –ü–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è: –µ—Å–ª–∏ —É –Ω–∞–∂–∞–≤—à–µ–≥–æ –Ω–µ—Ç username ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    if not query.from_user.username:
        await query.answer("–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω @username –≤ Telegram. –ó–∞–¥–∞–π—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è.", show_alert=True)
        return

    if query.data == "milk_done":
        if not data["milk_queue"]:
            await query.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
            return

        current = data["milk_queue"][data["milk_index"]]
        # –†–∞–∑—Ä–µ—à–∞–µ–º –∫–ª–∏–∫ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ username
        if query.from_user.username != current["username"].lstrip("@"):
            await query.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å!", show_alert=True)
            return

        done_mention = current["mention"]
        data["milk_index"] = (data["milk_index"] + 1) % len(data["milk_queue"])
        next_mention = data["milk_queue"][data["milk_index"]]["mention"]
        save_data(data)

        new_text = (
            f"‚úÖ {done_mention} –∫—É–ø–∏–ª(–∞) –º–æ–ª–æ–∫–æ.\n"
            f"–°–ª–µ–¥—É—é—â–∏–π: {next_mention}\n\n"
            + format_queue(data["milk_queue"], data["milk_index"], "ü•õ –û—á–µ—Ä–µ–¥—å –Ω–∞ –º–æ–ª–æ–∫–æ")
        )
        await query.edit_message_text(new_text, reply_markup=milk_keyboard())

    elif query.data == "coffee_done":
        if not data["coffee_queue"]:
            await query.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
            return

        current = data["coffee_queue"][data["coffee_index"]]
        if query.from_user.username != current["username"].lstrip("@"):
            await query.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å!", show_alert=True)
            return

        done_mention = current["mention"]
        data["coffee_index"] = (data["coffee_index"] + 1) % len(data["coffee_queue"])
        next_mention = data["coffee_queue"][data["coffee_index"]]["mention"]
        save_data(data)

        new_text = (
            f"‚úÖ {done_mention} –ø–æ—á–∏—Å—Ç–∏–ª(–∞) –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É.\n"
            f"–°–ª–µ–¥—É—é—â–∏–π: {next_mention}\n\n"
            + format_queue(data["coffee_queue"], data["coffee_index"], "‚òï –û—á–µ—Ä–µ–¥—å –Ω–∞ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É")
        )
        await query.edit_message_text(new_text, reply_markup=coffee_keyboard())

    await query.answer()

# === –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫–∏ ===
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("addmilk", add_milk))
    app.add_handler(CommandHandler("addcoffee", add_coffee))
    app.add_handler(CallbackQueryHandler(button_handler))

    # –ü–æ–¥–Ω–∏–º–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,                          # —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å = –≤–∞—à —Ç–æ–∫–µ–Ω
        webhook_url=f"{BASE_URL}/{TOKEN}",       # Telegram –±—É–¥–µ—Ç —Å–ª–∞—Ç—å –∞–ø–¥–µ–π—Ç—ã —Å—é–¥–∞
    )

if __name__ == "__main__":
    main()
