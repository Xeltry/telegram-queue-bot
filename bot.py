import os
import json
import random
import logging
import asyncio
from datetime import datetime

import pytz
from fastapi import FastAPI, Request, HTTPException
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
)
from telegram.constants import ParseMode
from telegram.error import BadRequest
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# ====== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ======
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ====== –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ======
TOKEN    = os.getenv("TELEGRAM_BOT_TOKEN")
BASE_URL = os.getenv("BASE_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä, https://your.domain.com
if not TOKEN or not BASE_URL:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ BASE_URL")

# ====== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Ñ–∞–π–ª—ã ======
DATA_FILE     = "queues.json"
PHRASES_FILE  = "phrases.json"
MINSK_TZ      = pytz.timezone("Europe/Minsk")
file_lock     = asyncio.Lock()

# ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======
MAIN_KEYBOARD = ReplyKeyboardMarkup(
    [["–ö—É–ø–∏–ª –∫–æ—Ñ–µ", "–ü–æ—á–∏—Å—Ç–∏–ª –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É"]],
    resize_keyboard=True,
    one_time_keyboard=False,
)

def milk_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –ö—É–ø–∏–ª(–∞) ü•õ", callback_data="milk_done")]])

def coffee_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –ü–æ—á–∏—Å—Ç–∏–ª(–∞) ‚òï", callback_data="coffee_done")]])

# ====== –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—Ä–∞–∑ ======
with open(PHRASES_FILE, encoding="utf-8") as f:
    phrases = json.load(f)
milk_phrases   = phrases.get("milk_phrases", [])
coffee_phrases = phrases.get("coffee_phrases", [])

# ====== –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤–≤–æ–¥-–≤—ã–≤–æ–¥ ======
def _sync_load_data() -> dict:
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except json.JSONDecodeError:
            logger.warning("JSON –ø–æ–≤—Ä–µ–∂–¥—ë–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª")
    return {}

def _sync_save_data(data: dict) -> None:
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

async def load_data() -> dict:
    return await asyncio.to_thread(_sync_load_data)

async def save_data(data: dict) -> None:
    await asyncio.to_thread(_sync_save_data, data)

# ====== –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —á–∞—Ç–∞ ======
async def get_chat_data(chat_id: int) -> dict:
    async with file_lock:
        all_data = await load_data()
        cid = str(chat_id)
        if cid not in all_data:
            all_data[cid] = {
                "milk_queue": [], "coffee_queue": [],
                "milk_index": 0,  "coffee_index": 0,
                "milk_msg_id": None, "coffee_msg_id": None,
            }
            await save_data(all_data)
        return all_data[cid]

async def update_chat_data(chat_id: int, chat_data: dict) -> None:
    async with file_lock:
        all_data = await load_data()
        all_data[str(chat_id)] = chat_data
        await save_data(all_data)

# ====== –£—Ç–∏–ª–∏—Ç—ã ======
async def safe_edit(bot, chat_id: int, msg_id: int, new_text: str, keyboard: InlineKeyboardMarkup):
    try:
        await bot.edit_message_text(
            text=new_text,
            chat_id=chat_id,
            message_id=msg_id,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    except BadRequest as e:
        if "Message is not modified" in str(e):
            return
        logger.error("safe_edit error: %s", e)

def format_queue(queue: list, index: int, title: str) -> str:
    if not queue:
        return f"<b>{title}</b>\n‚Äî –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞."
    lines = [f"<b>{title}</b>"]
    for offset in range(len(queue)):
        i      = (index + offset) % len(queue)
        marker = " ‚Üê —Å–µ–π—á–∞—Å" if offset == 0 else ""
        lines.append(f"{offset+1}. {queue[i]['mention']}{marker}")
    return "\n".join(lines)

# ====== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å ======
async def add_to_queue(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    queue_name: str,
    msg_key: str,
    idx_key: str,
    title: str,
    keyboard_func
):
    chat_id = update.effective_chat.id
    data    = await get_chat_data(chat_id)
    user    = update.effective_user

    if user.id not in [p["id"] for p in data[queue_name]]:
        mention = f"@{user.username}" if user.username else user.first_name
        data[queue_name].append({"id": user.id, "mention": mention})
        await update_chat_data(chat_id, data)

        await update.message.reply_text(
            f"‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å ¬´{title}¬ª",
            reply_markup=MAIN_KEYBOARD
        )
        if data[msg_key]:
            await safe_edit(
                context.bot, chat_id, data[msg_key],
                format_queue(data[queue_name], data[idx_key], title),
                keyboard_func()
            )
    else:
        await update.message.reply_text(
            f"–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ ¬´{title}¬ª",
            reply_markup=MAIN_KEYBOARD
        )

# ====== –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ ======
async def remove_from_queue(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    queue_name: str,
    msg_key: str,
    index_key: str,
    title: str,
    keyboard_func
):
    chat_id = update.effective_chat.id
    data    = await get_chat_data(chat_id)
    user    = update.effective_user
    before  = len(data[queue_name])

    data[queue_name] = [p for p in data[queue_name] if p["id"] != user.id]
    if len(data[queue_name]) < before:
        await update_chat_data(chat_id, data)
        await update.message.reply_text(
            f"‚ùå –í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏ ¬´{title}¬ª",
            reply_markup=MAIN_KEYBOARD
        )
        if data[msg_key]:
            await safe_edit(
                context.bot, chat_id, data[msg_key],
                format_queue(data[queue_name], data[index_key], title),
                keyboard_func()
            )
    else:
        await update.message.reply_text(
            f"–í–∞—Å –Ω–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ ¬´{title}¬ª",
            reply_markup=MAIN_KEYBOARD
        )

# ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è ¬´–ì–æ—Ç–æ–≤–æ¬ª ======
async def handle_done(
    query,
    context: ContextTypes.DEFAULT_TYPE,
    queue_name: str,
    msg_key: str,
    index_key: str,
    title: str,
    keyboard_func,
    phrases: list
):
    chat_id = query.message.chat.id
    data    = await get_chat_data(chat_id)

    if not data[queue_name]:
        await query.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
        return

    current = data[queue_name][data[index_key]]
    if query.from_user.id != current["id"]:
        await query.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å!", show_alert=True)
        return

    data[index_key] = (data[index_key] + 1) % len(data[queue_name])
    await update_chat_data(chat_id, data)

    if data[msg_key]:
        await safe_edit(
            context.bot, chat_id, data[msg_key],
            format_queue(data[queue_name], data[index_key], title),
            keyboard_func()
        )

    next_user = data[queue_name][data[index_key]]
    doer      = f"@{query.from_user.username}" if query.from_user.username else query.from_user.first_name
    phrase    = random.choice(phrases).format(doer=doer, next=next_user["mention"])
    await context.bot.send_message(
        chat_id,
        phrase,
        parse_mode=ParseMode.HTML,
        reply_markup=MAIN_KEYBOARD
    )
    await query.answer()

# ====== Telegram-—Ö–µ–Ω–¥–ª–µ—Ä—ã ======
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=MAIN_KEYBOARD
    )

async def show_milk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    data    = await get_chat_data(chat_id)
    text    = format_queue(data["milk_queue"], data["milk_index"], "ü•õ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –º–æ–ª–æ–∫–æ")
    msg     = await update.message.reply_text(text, reply_markup=MAIN_KEYBOARD)
    data["milk_msg_id"] = msg.message_id
    await update_chat_data(chat_id, data)

async def show_coffee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    data    = await get_chat_data(chat_id)
    text    = format_queue(data["coffee_queue"], data["coffee_index"], "‚òï –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É")
    msg     = await update.message.reply_text(text, reply_markup=MAIN_KEYBOARD)
    data["coffee_msg_id"] = msg.message_id
    await update_chat_data(chat_id, data)

async def add_milk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await add_to_queue(
        update, context,
        "milk_queue", "milk_msg_id", "milk_index",
        "ü•õ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –º–æ–ª–æ–∫–æ", milk_keyboard
    )

async def add_coffee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await add_to_queue(
        update, context,
        "coffee_queue", "coffee_msg_id", "coffee_index",
        "‚òï –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É", coffee_keyboard
    )

async def remove_milk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await remove_from_queue(
        update, context,
        "milk_queue", "milk_msg_id", "milk_index",
        "ü•õ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –º–æ–ª–æ–∫–æ", milk_keyboard
    )

async def remove_coffee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await remove_from_queue(
        update, context,
        "coffee_queue", "coffee_msg_id", "coffee_index",
        "‚òï –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É", coffee_keyboard
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "/addmilk ‚Äî –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –º–æ–ª–æ–∫–æ\n"
        "/addcoffee ‚Äî –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∫–æ—Ñ–µ\n"
        "/removemilk ‚Äî –≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –º–æ–ª–æ–∫–æ\n"
        "/removecoffee ‚Äî –≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∫–æ—Ñ–µ\n"
        "/milk ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –Ω–∞ –º–æ–ª–æ–∫–æ\n"
        "/coffee ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∫–æ—Ñ–µ\n"
    )
    await update.message.reply_text(text, reply_markup=MAIN_KEYBOARD)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query.data == "milk_done":
        await handle_done(
            query, context,
            "milk_queue", "milk_msg_id", "milk_index",
            "ü•õ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –º–æ–ª–æ–∫–æ", milk_keyboard, milk_phrases
        )
    elif query.data == "coffee_done":
        await handle_done(
            query, context,
            "coffee_queue", "coffee_msg_id", "coffee_index",
            "‚òï –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É", coffee_keyboard, coffee_phrases
        )

# ====== –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ ======
async def text_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–ö—É–ø–∏–ª –∫–æ—Ñ–µ":
        await add_coffee(update, context)
    elif text == "–ü–æ—á–∏—Å—Ç–∏–ª –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É":
        await add_milk(update, context)
    elif text == "–£–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –º–æ–ª–æ–∫–∞":
        await remove_milk(update, context)
    elif text == "–£–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∫–æ—Ñ–µ":
        await remove_coffee(update, context)

# ====== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –∏ Telegram Application ======
app = FastAPI()
application = Application.builder().token(TOKEN).build()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
for cmd, handler in [
    ("start",    start_command),
    ("help",     help_command),
    ("addmilk",  add_milk),
    ("addcoffee",add_coffee),
    ("removemilk",remove_milk),
    ("removecoffee",remove_coffee),
    ("milk",     show_milk),
    ("coffee",   show_coffee),
]:
    application.add_handler(CommandHandler(cmd, handler))

application.add_handler(CallbackQueryHandler(button_handler))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_button_handler))

# ====== Webhook ======
@app.on_event("startup")
async def on_startup():
    await application.initialize()
    await application.startup()
    await application.bot.set_webhook(f"{BASE_URL}/webhook")
    logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s/webhook", BASE_URL)

@app.on_event("shutdown")
async def on_shutdown():
    await application.shutdown()

@app.post("/webhook")
async def webhook(req: Request):
    try:
        payload = await req.json()
    except json.JSONDecodeError:
        raise HTTPException(status_code=400, detail="Invalid JSON")
    update = Update.de_json(payload, application.bot)
    await application.process_update(update)
    return {"ok": True}

@app.get("/health")
async def health():
    return {"status": "ok"}

if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", 8000))
    uvicorn.run("bot:app", host="0.0.0.0", port=port)
